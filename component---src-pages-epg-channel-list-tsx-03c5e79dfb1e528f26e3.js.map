{"version":3,"sources":["webpack://sky-plus-epg-simulator/./node_modules/@material-ui/core/esm/NoSsr/NoSsr.js","webpack://sky-plus-epg-simulator/./node_modules/dayjs/plugin/isBetween.js","webpack://sky-plus-epg-simulator/./src/components/epg/Header/titleHeader.tsx","webpack://sky-plus-epg-simulator/./src/data/getEpg.ts","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/programmes.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/epgChannel.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/timingHeaders.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/listings.tsx","webpack://sky-plus-epg-simulator/./src/hooks/usePrevious.ts","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/index.tsx","webpack://sky-plus-epg-simulator/./src/pages/epg/channel-list.tsx","webpack://sky-plus-epg-simulator/./src/assets/icons/info.inline.svg"],"names":["useEnhancedEffect","window","props","children","_props$defer","defer","_props$fallback","fallback","_React$useState","mountedState","setMountedState","module","exports","e","i","t","prototype","isBetween","s","f","n","o","r","u","this","isAfter","isBefore","useHeaderStyles","makeStyles","root","fontFamily","fontWeight","color","Colors","display","flexDirection","marginTop","date","fontStretch","fontSize","title","letterSpacing","textTransform","heading","timeText","useRecoilValue","timeState","time","format","classes","NoSsr","className","EPG_API_URL","getProgrammeListingForSID","channelSid","abortController","realDate","dayjs","fetch","signal","json","jsonData","events","schedule","response","map","event","startTime","st","duration","d","eventId","eid","channelGenreId","cgid","programmeUuid","programmeuuid","seasonNumber","seasonnumber","episodeNumber","episodenumber","seasonUuid","seasonuuid","seriesUuid","seriesuuid","hasChildren","haschildren","synopsis","sy","eg","esg","tso","rating","audioTechnology","at","hasSubtitles","hasAudioDescription","ad","isHd","hd","isNew","new","canSeriesLink","canl","canBookRecording","canb","hasAlternativeAudio","isRestartable","restartable","slo","w","ippv","oppv","useStyles","info","height","infoContainer","Programmes","programmes","scheduleStartTime","scheduleTimeState","programmeCount","length","totalTime","programme","durationPassed","diff","durationMins","Math","round","style","gridColumnEnd","clsx","key","React","dayJsIsBetween","item","padding","channelNumber","width","marginRight","channelName","whiteSpace","overflow","textOverflow","background","lineHeight","noListings","getEventsForNext90Minutes","filter","diff2","ongoing","channel","useState","programmeListings","setProgrammeListings","eventsWeCareAbout","useMemo","useEffect","AbortController","String","sid","then","listings","catch","abort","name","aria-hidden","timingHeader","textAlign","formatTimingHeader","add","position","gridTemplateColumns","gridTemplateRows","maxWidth","margin","gap","content","backgroundPosition","backgroundRepeat","backgroundSize","backgroundImage","MenuMoreArrowSvg","right","transformOrigin","bottom","transform","top","colorButtons","controlPrompt","controlText","noChannelsErrorMsg","gridColumn","gridRow","justifySelf","alignSelf","value","ref","firstChannel","genreFilter","startingChannel","setStartingChannel","prevSettings","useRef","current","channelsOnPage","setChannelsOnPage","changePage","change","first","newStart","getChannelNumberFromNumberPlusN","getChannelAtIndex","history","replaceState","newURL","URL","location","href","search","path","updateBrowserUrl","data","getNChannelsFromNumber","noChannels","ErrorMessage","errorCode","controlPromptAction","ColorButtonsFooter","buttonPressHandler","btn","buttonsText","red","green","yellow","blue","ControlText","EpgBackgroundImage","Header","logoText","GenreName","startFromChannelNumber","state","isSSG","searchParams","get","getStartChannelFromWindow","genreNumber","genre","parseInt","getGenreFromWindow","setControlsVisible","useSetRecoilState","controlsState","goBack","control","detail","includes","navigate","selectedTab","document","addEventListener","controlsShownStateSetter","removeEventListener","InnerLayout","InfoInline","createElement","defaultProps","default"],"mappings":"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","file":"component---src-pages-epg-channel-list-tsx-03c5e79dfb1e528f26e3.js","sourcesContent":["import * as React from 'react';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      mountedState = _React$useState[0],\n      setMountedState = _React$useState[1];\n\n  useEnhancedEffect(function () {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(function () {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","!function (e, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(i) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isBetween = i();\n}(this, function () {\n  \"use strict\";\n\n  return function (e, i, t) {\n    i.prototype.isBetween = function (e, i, s, f) {\n      var n = t(e),\n          o = t(i),\n          r = \"(\" === (f = f || \"()\")[0],\n          u = \")\" === f[1];\n      return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));\n    };\n  };\n});","import { timeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { makeStyles, NoSsr } from '@material-ui/core'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\nconst useHeaderStyles = makeStyles({\n  root: {\n    fontFamily: 'Zurich',\n    fontWeight: 700,\n    color: Colors.accent,\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 11,\n  },\n  date: {\n    fontStretch: 'condensed',\n    fontSize: 24,\n  },\n  title: {\n    fontStretch: 'expanded',\n    letterSpacing: 0.4,\n    textTransform: 'uppercase',\n    fontSize: 28,\n  },\n})\n\ninterface Props {\n  heading: string\n}\n\nconst TitleHeader: React.FC<Props> = ({ heading }) => {\n  const { time } = useRecoilValue(timeState)\n  const timeText = time.format('h.mma ddd D MMM')\n\n  const classes = useHeaderStyles()\n\n  return (\n    <NoSsr>\n      <div className={classes.root}>\n        <p className={classes.date}>{timeText}</p>\n        <h1 className={classes.title}>{heading}</h1>\n      </div>\n    </NoSsr>\n  )\n}\n\nexport default TitleHeader\n","import dayjs from 'dayjs'\n\nexport interface EPGChannelListing {\n  /**\n   * YYYYMMDD\n   */\n  date: string\n  schedule: Programme[]\n}\n\nexport interface Programme {\n  /**\n   * The start time of the programme as a Unix timestamp (milliseconds since epoch).\n   *\n   * Original: `st`. Original in seconds since epoch.\n   */\n  startTime: number\n  /**\n   * Duration of the show in seconds. (e.g. 3600 = 1 hour)\n   *\n   * Original: `d`\n   */\n  duration: number\n  /**\n   * ID for this event.\n   *\n   * Original: `eid`\n   */\n  eventId: string\n  /**\n   * Unique ID for this programme.\n   *\n   * Original: `programmeuuid`\n   */\n  programmeUuid: string | undefined\n  /**\n   * Programme season number.\n   *\n   * Defaults to `1` if not part of a series.\n   *\n   * Original: `seasonnumber`\n   */\n  seasonNumber: number | undefined\n  /**\n   * Programme episode number.\n   *\n   * Defaults to `1` if not part of a series.\n   *\n   * Original: `episodenumber`\n   */\n  episodeNumber: number | undefined\n  /**\n   * Unique ID for this programme's season.\n   *\n   * Original: `seasonuuid`\n   */\n  seasonUuid: string | undefined\n  /**\n   * Unique ID for this programme's series. (All seasons and eps.)\n   *\n   * Original: `seriesuuid`\n   */\n  seriesUuid: string | undefined\n  /**\n   * Whether the programme has children\n   *\n   * Original: `haschildren`\n   */\n  hasChildren: boolean\n  /**\n   * Programme title\n   *\n   * Original: `t`\n   */\n  title: string\n  /**\n   * Programme description\n   *\n   * Original: `sy`\n   */\n  synopsis: string\n  /**\n   * Unknown\n   *\n   * Original: `eg`\n   */\n  eg: number\n  /**\n   * Unknown\n   *\n   * Original: `esg`\n   */\n  esg: number\n  /**\n   * Unknown\n   *\n   * Original: `tso`\n   */\n  tso: number\n  /**\n   * Programme rating\n   *\n   * Original: `r`\n   */\n  rating: '--' | 'U' | 'PG' | '12' | '15' | '18' | 'R' | 'R+'\n  /**\n   * Audio technology for the programme.\n   *\n   * M for mono. S for stereo. DD for Dolby Digital.\n   *\n   * Original: `at`\n   */\n  audioTechnology: 'M' | 'S' | 'DD'\n  /**\n   * Original: `s`\n   */\n  hasSubtitles: boolean\n  /**\n   * Original: `ad`\n   */\n  hasAudioDescription: boolean\n  /**\n   * Original: `hd`\n   */\n  isHd: boolean\n  /**\n   * Is the programme new.\n   *\n   * Original: `new`\n   */\n  isNew: boolean\n  /**\n   * Can record as series link.\n   *\n   * Original: `canl`\n   */\n  canSeriesLink: boolean\n  /**\n   * Can record this programme (book planner entry).\n   *\n   * Original: `canb`\n   */\n  canBookRecording: boolean\n  /**\n   * If the show has alternative audio.\n   *\n   * Original: `hasAlternativeAudio`\n   */\n  hasAlternativeAudio: boolean\n  /**\n   * Can the programme be started from the beginning.\n   *\n   * Original: `restartable`\n   */\n  isRestartable: boolean\n  /**\n   * Unknown\n   *\n   * Original: `slo`\n   */\n  slo: boolean\n  /**\n   * Unknown\n   *\n   * Original: `w`\n   */\n  w: boolean\n  /**\n   * Impulse pay-per-view\n   *\n   * Original: `ippv`\n   */\n  ippv: boolean\n  /**\n   * Order-ahead pay-per-view\n   *\n   * Original: `oppv`\n   */\n  oppv: boolean\n  /**\n   * Only on Box Office programmes.\n   *\n   * Original: `marketingmessage`\n   */\n  marketingMessage?: string\n  /**\n   * Channel genre that this programme's channel is in.\n   *\n   * Original: `cgid`\n   */\n  channelGenreId: number\n}\n\nconst EPG_API_URL = 'https://awk.epgsky.com/hawk/linear/schedule'\n\n/**\n * Gets EPG schedule for a specified channel and date.\n *\n * Date, if unspecified, is today.\n *\n * **Example SIDs:**\n * - BBC One HD = `2076`\n * - BBC News = `2085`\n * - Sky Intro = `1819`\n *\n * @param channelSid Channel SID\n * @param date Date (YYYYMMDD)\n */\nexport default async function getProgrammeListingForSID(\n  channelSid: string,\n  { date, abortController }: Partial<{ date: string; abortController: AbortController }> = {},\n): Promise<EPGChannelListing> {\n  let realDate: string\n\n  if (!date) {\n    realDate = dayjs().format('YYYYMMDD')\n  } else {\n    realDate = dayjs(date).format('YYYYMMDD')\n  }\n\n  const jsonData = await (await fetch(`${EPG_API_URL}/${realDate}/${channelSid}`, { signal: abortController.signal })).json()\n\n  const events = jsonData.schedule[0].events as Record<string, any>[]\n\n  const response: EPGChannelListing = {\n    date: jsonData.date,\n    schedule: events.map(\n      (event): Programme => ({\n        startTime: event.st * 1000,\n        duration: event.d,\n        eventId: event.eid,\n        channelGenreId: event.cgid,\n        programmeUuid: event.programmeuuid,\n        seasonNumber: event.seasonnumber,\n        episodeNumber: event.episodenumber,\n        seasonUuid: event.seasonuuid,\n        seriesUuid: event.seriesuuid,\n        hasChildren: event.haschildren,\n        title: event.t,\n        synopsis: event.sy,\n        eg: event.eg,\n        esg: event.esg,\n        tso: event.tso,\n        rating: event.r,\n        audioTechnology: event.at,\n        hasSubtitles: event.s,\n        hasAudioDescription: event.ad,\n        isHd: event.hd,\n        isNew: event.new,\n        canSeriesLink: event.canl,\n        canBookRecording: event.canb,\n        hasAlternativeAudio: event.hasAlternativeAudio,\n        isRestartable: event.restartable,\n        slo: event.slo,\n        w: event.w,\n        ippv: event.ippv,\n        oppv: event.oppv,\n      }),\n    ),\n  }\n\n  return response\n}\n","import InfoIcon from '@assets/icons/info.inline.svg'\nimport { scheduleTimeState } from '@atoms'\nimport { Programme } from '@data/getEpg'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport dayjs from 'dayjs'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\ninterface Props {\n  programmes: Programme[]\n  className: string\n}\n\nconst useStyles = makeStyles({\n  info: {\n    height: '0.75em',\n    display: 'inline-block',\n  },\n  infoContainer: {},\n})\n\nconst CUTOFF_FOR_INFO_ICON_IN_MINUTES = 25\n\nconst Programmes: React.FC<Props> = ({ programmes, className }) => {\n  const classes = useStyles()\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n\n  const programmeCount = programmes.length\n  let totalTime = 0\n\n  return (\n    <>\n      {programmes.map((programme, i) => {\n        let durationPassed = -dayjs(programme.startTime).diff(scheduleStartTime, 'minutes')\n\n        let durationMins = Math.round(programme.duration / 60) - (durationPassed > 0 ? durationPassed : 0)\n\n        if (i < programmeCount - 1) {\n          totalTime += durationMins\n        } else {\n          // Last item should only fill remaining space!\n          durationMins = 90 - totalTime\n        }\n\n        return (\n          <span\n            style={{ gridColumnEnd: `span ${durationMins}` }}\n            className={clsx(className, durationMins < CUTOFF_FOR_INFO_ICON_IN_MINUTES && classes.infoContainer)}\n            key={`${programme.startTime}__${programme.eventId}`}\n          >\n            {durationMins < CUTOFF_FOR_INFO_ICON_IN_MINUTES ? <InfoIcon className={classes.info} /> : programme.title}\n          </span>\n        )\n      })}\n    </>\n  )\n}\n\nexport default React.memo(Programmes)\n","import { scheduleTimeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { Channel } from '@data/epg/AllChannels'\nimport getProgrammeListingForSID, { EPGChannelListing, Programme } from '@data/getEpg'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport dayjs from 'dayjs'\nimport dayJsIsBetween from 'dayjs/plugin/isBetween'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport Programmes from './programmes'\n\ndayjs.extend(dayJsIsBetween)\n\ninterface Props {\n  channel: Channel\n}\n\nconst useStyles = makeStyles({\n  item: {\n    padding: '3px 4px',\n  },\n  channelNumber: {\n    width: '3ch',\n    marginRight: 4,\n  },\n  channelName: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: '\"..\"',\n    color: '#fff',\n    background: Colors.main,\n    lineHeight: 1,\n  },\n  programme: {\n    '&': {\n      // Fallback value for Chrome\n      textOverflow: 'ellipsis',\n    },\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: '\"..\"',\n    color: '#fff',\n    background: Colors.main,\n    lineHeight: 1,\n  },\n  noListings: {\n    background: Colors.mainFaded,\n    color: Colors.mainFadedText,\n  },\n})\n\nfunction getEventsForNext90Minutes(startTime: dayjs.Dayjs, events: Programme[]): Programme[] {\n  return events.filter(event => {\n    const diff = dayjs(event.startTime).diff(startTime, 'minutes')\n    const diff2 = dayjs(event.startTime + event.duration * 1000).diff(startTime, 'minutes')\n    const ongoing = dayjs(startTime).isBetween(event.startTime, event.startTime + event.duration * 1000, 'minutes', '()')\n\n    return (diff >= 0 && diff < 90) || (diff2 > 0 && diff2 < 90) || ongoing\n  })\n}\n\nconst EpgChannel: React.FC<Props> = ({ channel }) => {\n  const classes = useStyles()\n\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n  const [programmeListings, setProgrammeListings] = useState<EPGChannelListing>(null)\n\n  const eventsWeCareAbout = useMemo(() => {\n    if (!programmeListings) {\n      return null\n    }\n\n    return getEventsForNext90Minutes(scheduleStartTime, programmeListings.schedule)\n  }, [getEventsForNext90Minutes, scheduleStartTime, programmeListings])\n\n  useEffect(() => {\n    if (programmeListings) return\n\n    const abortController = new AbortController()\n\n    getProgrammeListingForSID(String(channel.sid), {\n      abortController,\n    })\n      .then(listings => {\n        setProgrammeListings(listings)\n      })\n      .catch(() => {})\n\n    return () => {\n      abortController.abort()\n    }\n  }, [programmeListings, getProgrammeListingForSID, channel])\n\n  return (\n    <>\n      <span className={clsx(classes.channelName, classes.item)}>\n        <span className={classes.channelNumber}>{channel.channelNumber}</span>\n        {channel.name}\n      </span>\n\n      {/* Spacer */}\n      <span />\n\n      {!programmeListings && !eventsWeCareAbout && <span aria-hidden style={{ gridColumnEnd: 'span 90' }} />}\n      {programmeListings && eventsWeCareAbout && <Programmes className={clsx(classes.programme, classes.item)} programmes={eventsWeCareAbout} />}\n      {programmeListings && eventsWeCareAbout && eventsWeCareAbout.length === 0 && (\n        <span className={clsx(classes.programme, classes.noListings, classes.item)} style={{ gridColumnEnd: 'span 90' }}>\n          ..no listings available\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default EpgChannel\n","import { scheduleTimeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { formatTimingHeader } from '@helpers/timeFormatting'\nimport { makeStyles } from '@material-ui/core'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\nconst useStyles = makeStyles({\n  timingHeader: {\n    color: Colors.accent,\n    lineHeight: 1.5,\n\n    '&:first-child': { textAlign: 'right' },\n    '&:not(:first-child)': {\n      gridColumnEnd: 'span 30',\n    },\n  },\n})\n\nconst TimingHeaders: React.FC = () => {\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n  const classes = useStyles()\n\n  return (\n    <>\n      <span className={classes.timingHeader}>Today</span>\n      {/* Spacer */}\n      <span />\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime)}</span>\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime.add(30, 'minutes'))}</span>\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime.add(60, 'minutes'))}</span>\n    </>\n  )\n}\n\nexport default TimingHeaders\n","import MenuMoreArrowSvg from '@assets/icons/list-arrow.svg'\nimport ControlText from '@components/ControlText'\nimport ErrorMessage from '@components/ErrorMessage'\nimport { Genres } from '@constants/Genres'\nimport Colors from '@data/Colors'\nimport { getChannelAtIndex, getChannelNumberFromNumberPlusN, getNChannelsFromNumber } from '@data/epg/AllChannels'\nimport usePrevious from '@hooks/usePrevious'\nimport { makeStyles, NoSsr } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport ColorButtonsFooter from '../Footer/ColorButtonsFooter'\nimport EpgChannel from './epgChannel'\nimport TimingHeaders from './timingHeaders'\n\ninterface Props {\n  firstChannel: string\n  /**\n   * Optional number to filter by genre.\n   */\n  genreFilter?: Genres\n}\n\nconst CHANNELS_PER_PAGE = 10\nconst HOURS_PER_PAGE = 1.5\nconst MINUTES_PER_PAGE = HOURS_PER_PAGE * 60\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    display: 'grid',\n\n    // Grid column span is used to give programmes the right duration.\n    // A span of `10` would equate to a width equal to 10 minutes.\n    //\n    // This is done by creating 90 columns of width `1fr`, so we have 90\n    // columns of equal width.\n    gridTemplateColumns: `33% 2px repeat(${MINUTES_PER_PAGE}, minmax(0, 1fr))`,\n    gridTemplateRows: `repeat(${CHANNELS_PER_PAGE + 1}, calc(1em + 6px))`,\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    gap: 4,\n    overflow: 'visible',\n    fontFamily: 'Zurich',\n    fontStretch: 'condensed',\n    fontSize: 24,\n    marginTop: -4,\n\n    '&::after, &::before': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      height: 24,\n      width: 32,\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'contain',\n      backgroundImage: `url(${MenuMoreArrowSvg})`,\n      right: 0,\n      transformOrigin: 'center',\n    },\n\n    '&::after': {\n      bottom: 0,\n      transform: 'translateY(100%)',\n    },\n\n    '&::before': {\n      // Row height + row gap\n      top: 30 + 4,\n      transform: 'translateY(-100%) rotate(0.5turn)',\n    },\n  },\n  colorButtons: {\n    position: 'static',\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    marginTop: 16,\n  },\n  controlPrompt: {\n    fontFamily: 'ZurichBT',\n    color: Colors.accent,\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    fontSize: 24,\n    marginTop: 8,\n  },\n  controlText: {\n    fontSize: 20,\n  },\n  noChannelsErrorMsg: {\n    gridColumn: '1 / -1',\n    gridRow: '2 / -1',\n    justifySelf: 'center',\n    alignSelf: 'center',\n    width: '100%',\n  },\n})\n\nfunction updateBrowserUrl(startingChannel: string, genreFilter: number | null) {\n  const newURL = new URL(window.location.href)\n  newURL.search = '?start=' + startingChannel\n\n  if (genreFilter !== null) {\n    newURL.search = newURL.search + '&genre=' + genreFilter\n  }\n\n  window.history.replaceState({ path: newURL.href }, '', newURL.href)\n}\n\nconst Channels: React.FC<Props> = ({ firstChannel, genreFilter }) => {\n  const classes = useStyles()\n  const [startingChannel, setStartingChannel] = useState(firstChannel)\n\n  const prevSettings = usePrevious(`${startingChannel}__${genreFilter}`)\n  const [channelsOnPage, setChannelsOnPage] = useState([])\n\n  useEffect(() => {\n    if (prevSettings !== `${startingChannel}__${genreFilter}`) {\n      const data = getNChannelsFromNumber(startingChannel, CHANNELS_PER_PAGE, genreFilter)\n\n      setChannelsOnPage(data)\n    }\n  })\n\n  function changePage(change: 1 | -1) {\n    setStartingChannel(first => {\n      let newStart = getChannelNumberFromNumberPlusN(first, change * CHANNELS_PER_PAGE, genreFilter)\n\n      // If the start channel matches the current, we're at the end of the list, so\n      // let's wrap to the other side.\n      if (newStart === first) {\n        if (change === 1) {\n          // down a page\n          newStart = getChannelAtIndex(0, genreFilter)?.channelNumber || '101'\n        } else {\n          // up a page\n          newStart = getChannelAtIndex(-1, genreFilter)?.channelNumber || '101'\n        }\n      }\n\n      if (window.history.replaceState) {\n        updateBrowserUrl(newStart, genreFilter)\n      }\n\n      return newStart\n    })\n  }\n\n  const noChannels = !channelsOnPage || channelsOnPage.length === 0\n\n  return (\n    <>\n      <section className={classes.root}>\n        <TimingHeaders />\n\n        <NoSsr>\n          {channelsOnPage?.map(channel => (\n            <EpgChannel key={channel.sid} channel={channel} />\n          ))}\n\n          {noChannels && (\n            <ErrorMessage errorCode={null} className={classes.noChannelsErrorMsg} controlPrompt controlPromptAction=\"cancel\">\n              <br />\n              There are no services of this type available.\n            </ErrorMessage>\n          )}\n        </NoSsr>\n      </section>\n\n      <ColorButtonsFooter\n        className={classes.colorButtons}\n        buttonPressHandler={btn => {\n          if (btn === 'red') {\n            changePage(-1)\n          } else if (btn === 'green') {\n            changePage(+1)\n          }\n        }}\n        buttonsText={noChannels ? {} : { red: 'Page Up', green: 'Page Down', yellow: '+24 Hours', blue: '–24 Hours' }}\n      />\n\n      <p className={classes.controlPrompt}>\n        {!noChannels && (\n          <>\n            Press <ControlText className={classes.controlText}>SELECT</ControlText> to view\n          </>\n        )}\n      </p>\n    </>\n  )\n}\n\nexport default Channels\n","import { useEffect, useRef } from 'react'\n\nexport default function usePrevious<T>(value: T): T {\n  const ref = useRef<T>()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n","import EpgBackgroundImage from '@assets/images/guide-bg.sized.png'\nimport { GenreName, Genres } from '@constants/Genres'\nimport { makeStyles } from '@material-ui/core'\nimport React from 'react'\nimport { Header, TitleHeader } from '../Header'\nimport Channels from './listings'\n\ninterface Props {\n  startingChannel: string\n  /**\n   * Optional number to filter by genre.\n   */\n  genreFilter?: Genres\n}\n\nconst useStyles = makeStyles({\n  root: {\n    background: `url(${EpgBackgroundImage})`,\n  },\n})\n\nconst ChannelListing: React.FC<Props> = ({ startingChannel, genreFilter }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Header logoText=\"guide\">\n        <TitleHeader heading={GenreName[genreFilter] || 'All channels'} />\n      </Header>\n      <Channels firstChannel={startingChannel} genreFilter={genreFilter} />\n    </div>\n  )\n}\n\nexport default ChannelListing\n","import { controlsState } from '@atoms'\nimport ChannelListing from '@components/epg/ChannelListing/index'\nimport { Genres } from '@constants/Genres'\nimport controlsShownStateSetter from '@helpers/controlsShownStateSetter'\nimport isSSG from '@helpers/isSSG'\nimport InnerLayout from '@layouts/InnerLayout'\nimport type { WindowLocation } from '@reach/router'\nimport { navigate, PageProps } from 'gatsby'\nimport React, { useEffect } from 'react'\nimport { useSetRecoilState } from 'recoil'\n\ntype Props = PageProps<object, object, WindowLocation<{ startFromChannelNumber?: string; genre?: Genres }>['state']>\n\nfunction getStartChannelFromWindow(): string | null {\n  if (!isSSG()) {\n    try {\n      return new URL(window.location.href).searchParams.get('start')\n    } catch {\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nfunction getGenreFromWindow(): number | null {\n  if (!isSSG()) {\n    try {\n      return parseInt(new URL(window.location.href).searchParams.get('genre')) || null\n    } catch {\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nconst ChannelListingPage: React.FC<Props> = ({ location }) => {\n  const startFromChannelNumber = location?.state?.startFromChannelNumber || getStartChannelFromWindow() || '101'\n  const genreNumber: number | null = location?.state?.genre || getGenreFromWindow() || null\n\n  const setControlsVisible = useSetRecoilState(controlsState)\n\n  function goBack(e: SkyControlPressedEvent) {\n    const control = e.detail.control\n\n    if (['backUp'].includes(control)) {\n      navigate('/', { state: { selectedTab: 'GUIDE' } })\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('skyControlPressed', goBack as EventListener)\n    setControlsVisible(controlsShownStateSetter(['backUp'], true))\n\n    return () => {\n      document.removeEventListener('skyControlPressed', goBack as EventListener)\n      setControlsVisible(controlsShownStateSetter(['backUp'], false))\n    }\n  })\n\n  return (\n    <InnerLayout>\n      <ChannelListing startingChannel={startFromChannelNumber} genreFilter={genreNumber} />\n    </InnerLayout>\n  )\n}\n\nexport default ChannelListingPage\n","var React = require('react');\n\nfunction InfoInline (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fill\":\"currentColor\",\"d\":\"M.9 0v1.4h2.87V0zm0 2.12v3.85l-.9.17v.81h4.68v-.81l-.91-.17V2.12z\"}));\n}\n\nInfoInline.defaultProps = {\"viewBox\":\"0 0 4.68 6.95\"};\n\nmodule.exports = InfoInline;\n\nInfoInline.default = InfoInline;\n"],"sourceRoot":""}