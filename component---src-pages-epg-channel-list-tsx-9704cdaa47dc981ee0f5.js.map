{"version":3,"file":"component---src-pages-epg-channel-list-tsx-9704cdaa47dc981ee0f5.js","mappings":"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","sources":["webpack://sky-plus-epg-simulator/./node_modules/@material-ui/core/esm/NoSsr/NoSsr.js","webpack://sky-plus-epg-simulator/./node_modules/dayjs/plugin/isBetween.js","webpack://sky-plus-epg-simulator/./src/components/epg/Header/titleHeader.tsx","webpack://sky-plus-epg-simulator/./src/data/getEpg.ts","webpack://sky-plus-epg-simulator/./src/components/RecordButton.tsx","webpack://sky-plus-epg-simulator/./src/data/epg/streams/Streams.ts","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/programmes.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/epgChannel.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/timingHeaders.tsx","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/listings.tsx","webpack://sky-plus-epg-simulator/./src/hooks/usePrevious.ts","webpack://sky-plus-epg-simulator/./src/components/epg/ChannelListing/index.tsx","webpack://sky-plus-epg-simulator/./src/pages/epg/channel-list.tsx","webpack://sky-plus-epg-simulator/./src/assets/icons/info.inline.svg"],"sourcesContent":["import * as React from 'react';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      mountedState = _React$useState[0],\n      setMountedState = _React$useState[1];\n\n  useEnhancedEffect(function () {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(function () {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","require(\"core-js/modules/esnext.global-this.js\");\n\n!function (e, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(i) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isBetween = i();\n}(this, function () {\n  \"use strict\";\n\n  return function (e, i, t) {\n    i.prototype.isBetween = function (e, i, s, f) {\n      var n = t(e),\n          o = t(i),\n          r = \"(\" === (f = f || \"()\")[0],\n          u = \")\" === f[1];\n      return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));\n    };\n  };\n});","import { timeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { makeStyles, NoSsr } from '@material-ui/core'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\nconst useHeaderStyles = makeStyles({\n  root: {\n    fontFamily: 'Zurich',\n    fontWeight: 700,\n    color: Colors.accent,\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 11,\n  },\n  date: {\n    fontStretch: 'condensed',\n    fontSize: 24,\n  },\n  title: {\n    fontStretch: 'expanded',\n    letterSpacing: 0.4,\n    textTransform: 'uppercase',\n    fontSize: 28,\n  },\n})\n\ninterface Props {\n  heading: string\n}\n\nconst TitleHeader: React.FC<Props> = ({ heading }) => {\n  const { time } = useRecoilValue(timeState)\n  const timeText = time.format('h.mma ddd D MMM')\n\n  const classes = useHeaderStyles()\n\n  return (\n    <NoSsr>\n      <div className={classes.root}>\n        <p className={classes.date}>{timeText}</p>\n        <h1 className={classes.title}>{heading}</h1>\n      </div>\n    </NoSsr>\n  )\n}\n\nexport default TitleHeader\n","import dayjs from 'dayjs'\n\nexport interface EPGChannelListing {\n  /**\n   * YYYYMMDD\n   */\n  date: string\n  schedule: Programme[]\n}\n\nexport interface Programme {\n  /**\n   * The start time of the programme as a Unix timestamp (milliseconds since epoch).\n   *\n   * Original: `st`. Original in seconds since epoch.\n   */\n  startTime: number\n  /**\n   * Duration of the show in seconds. (e.g. 3600 = 1 hour)\n   *\n   * Original: `d`\n   */\n  duration: number\n  /**\n   * ID for this event.\n   *\n   * Original: `eid`\n   */\n  eventId: string\n  /**\n   * Unique ID for this programme.\n   *\n   * Original: `programmeuuid`\n   */\n  programmeUuid: string | undefined\n  /**\n   * Programme season number.\n   *\n   * Defaults to `1` if not part of a series.\n   *\n   * Original: `seasonnumber`\n   */\n  seasonNumber: number | undefined\n  /**\n   * Programme episode number.\n   *\n   * Defaults to `1` if not part of a series.\n   *\n   * Original: `episodenumber`\n   */\n  episodeNumber: number | undefined\n  /**\n   * Unique ID for this programme's season.\n   *\n   * Original: `seasonuuid`\n   */\n  seasonUuid: string | undefined\n  /**\n   * Unique ID for this programme's series. (All seasons and eps.)\n   *\n   * Original: `seriesuuid`\n   */\n  seriesUuid: string | undefined\n  /**\n   * Whether the programme has children\n   *\n   * Original: `haschildren`\n   */\n  hasChildren: boolean\n  /**\n   * Programme title\n   *\n   * Original: `t`\n   */\n  title: string\n  /**\n   * Programme description\n   *\n   * Original: `sy`\n   */\n  synopsis: string\n  /**\n   * Unknown\n   *\n   * Original: `eg`\n   */\n  eg: number\n  /**\n   * Unknown\n   *\n   * Original: `esg`\n   */\n  esg: number\n  /**\n   * Unknown\n   *\n   * Original: `tso`\n   */\n  tso: number\n  /**\n   * Programme rating\n   *\n   * Original: `r`\n   */\n  rating: '--' | 'U' | 'PG' | '12' | '15' | '18' | 'R' | 'R+'\n  /**\n   * Audio technology for the programme.\n   *\n   * M for mono. S for stereo. DD for Dolby Digital.\n   *\n   * Original: `at`\n   */\n  audioTechnology: 'M' | 'S' | 'DD'\n  /**\n   * Original: `s`\n   */\n  hasSubtitles: boolean\n  /**\n   * Original: `ad`\n   */\n  hasAudioDescription: boolean\n  /**\n   * Original: `hd`\n   */\n  isHd: boolean\n  /**\n   * Is the programme new.\n   *\n   * Original: `new`\n   */\n  isNew: boolean\n  /**\n   * Can record as series link.\n   *\n   * Original: `canl`\n   */\n  canSeriesLink: boolean\n  /**\n   * Can record this programme (book planner entry).\n   *\n   * Original: `canb`\n   */\n  canBookRecording: boolean\n  /**\n   * If the show has alternative audio.\n   *\n   * Original: `hasAlternativeAudio`\n   */\n  hasAlternativeAudio: boolean\n  /**\n   * Can the programme be started from the beginning.\n   *\n   * Original: `restartable`\n   */\n  isRestartable: boolean\n  /**\n   * Unknown\n   *\n   * Original: `slo`\n   */\n  slo: boolean\n  /**\n   * Unknown\n   *\n   * Original: `w`\n   */\n  w: boolean\n  /**\n   * Impulse pay-per-view\n   *\n   * Original: `ippv`\n   */\n  ippv: boolean\n  /**\n   * Order-ahead pay-per-view\n   *\n   * Original: `oppv`\n   */\n  oppv: boolean\n  /**\n   * Only on Box Office programmes.\n   *\n   * Original: `marketingmessage`\n   */\n  marketingMessage?: string\n  /**\n   * Channel genre that this programme's channel is in.\n   *\n   * Original: `cgid`\n   */\n  channelGenreId: number\n}\n\nconst EPG_API_URL = 'https://awk.epgsky.com/hawk/linear/schedule'\n\n/**\n * Gets EPG schedule for a specified channel and date.\n *\n * Date, if unspecified, is today.\n *\n * **Example SIDs:**\n * - BBC One HD = `2076`\n * - BBC News = `2085`\n * - Sky Intro = `1819`\n *\n * @param channelSid Channel SID\n * @param date Date (YYYYMMDD)\n */\nexport default async function getProgrammeListingForSID(\n  channelSid: string,\n  { date, abortController }: Partial<{ date: string; abortController: AbortController }> = {},\n): Promise<EPGChannelListing> {\n  let realDate: string\n\n  if (!date) {\n    realDate = dayjs().format('YYYYMMDD')\n  } else {\n    realDate = dayjs(date).format('YYYYMMDD')\n  }\n\n  const jsonData = await (await fetch(`${EPG_API_URL}/${realDate}/${channelSid}`, { signal: abortController.signal })).json()\n\n  const events = jsonData.schedule[0].events as Record<string, any>[]\n\n  const response: EPGChannelListing = {\n    date: jsonData.date,\n    schedule: events.map(\n      (event): Programme => ({\n        startTime: event.st * 1000,\n        duration: event.d,\n        eventId: event.eid,\n        channelGenreId: event.cgid,\n        programmeUuid: event.programmeuuid,\n        seasonNumber: event.seasonnumber,\n        episodeNumber: event.episodenumber,\n        seasonUuid: event.seasonuuid,\n        seriesUuid: event.seriesuuid,\n        hasChildren: event.haschildren,\n        title: event.t,\n        synopsis: event.sy,\n        eg: event.eg,\n        esg: event.esg,\n        tso: event.tso,\n        rating: event.r,\n        audioTechnology: event.at,\n        hasSubtitles: event.s,\n        hasAudioDescription: event.ad,\n        isHd: event.hd,\n        isNew: event.new,\n        canSeriesLink: event.canl,\n        canBookRecording: event.canb,\n        hasAlternativeAudio: event.hasAlternativeAudio,\n        isRestartable: event.restartable,\n        slo: event.slo,\n        w: event.w,\n        ippv: event.ippv,\n        oppv: event.oppv,\n      }),\n    ),\n  }\n\n  return response\n}\n","import Colors from '@data/Colors'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport React from 'react'\n\nconst BUTTON_SIZE = '1.2em'\n\nconst useStyles = makeStyles({\n  root: {\n    background: Colors.coloredButtons.red,\n    color: '#fff',\n    display: 'inline-flex',\n    lineHeight: BUTTON_SIZE,\n    justifyContent: 'center',\n    width: BUTTON_SIZE,\n    height: BUTTON_SIZE,\n    verticalAlign: 'middle',\n    transform: 'translateY(-0.125em)',\n    border: '2px solid #fff',\n    borderRadius: '50%',\n    fontSize: '0.95em',\n  },\n  inner: {\n    transform: 'translateY(-0.075em)',\n    fontSize: '0.95em',\n  },\n})\n\ninterface RecordButtonProps {\n  className?: string\n}\n\nconst RecordButton: React.FC<RecordButtonProps> = ({ className }) => {\n  const classes = useStyles()\n  return (\n    <span aria-label=\"record button\" className={clsx(classes.root, className)}>\n      <span className={classes.inner}>R</span>\n    </span>\n  )\n}\n\nexport default RecordButton\n","import streamData from './uk-m3u-streams.json'\nexport interface Stream {\n  /**\n   * Channel name.\n   *\n   * If not extracted correctly, will be `\"Unknown\"`.\n   */\n  name: string\n  /**\n   * The stream's HLS (m3u8) stream URL.\n   */\n  streamUrl: string\n}\n\nexport default streamData as Stream[]\n","import InfoIcon from '@assets/icons/info.inline.svg'\nimport { scheduleTimeState } from '@atoms'\nimport { Programme } from '@data/getEpg'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport dayjs from 'dayjs'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\ninterface Props {\n  programmes: Programme[]\n  className: string\n}\n\nconst useStyles = makeStyles({\n  info: {\n    height: '0.75em',\n    display: 'inline-block',\n  },\n  infoContainer: {},\n})\n\nconst CUTOFF_FOR_INFO_ICON_IN_MINUTES = 25\n\nconst Programmes: React.FC<Props> = ({ programmes, className }) => {\n  const classes = useStyles()\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n\n  const programmeCount = programmes.length\n  let totalTime = 0\n\n  return (\n    <>\n      {programmes.map((programme, i) => {\n        let durationPassed = -dayjs(programme.startTime).diff(scheduleStartTime, 'minutes')\n\n        let durationMins = Math.round(programme.duration / 60) - (durationPassed > 0 ? durationPassed : 0)\n\n        if (i < programmeCount - 1) {\n          totalTime += durationMins\n        } else {\n          // Last item should only fill remaining space!\n          durationMins = 90 - totalTime\n        }\n\n        const isActiveProgramme = dayjs().isBetween(programme.startTime, programme.startTime + programme.duration * 1000)\n\n        return (\n          <span\n            style={{ gridColumnEnd: `span ${durationMins}` }}\n            className={clsx(className, durationMins < CUTOFF_FOR_INFO_ICON_IN_MINUTES && classes.infoContainer)}\n            key={`${programme.startTime}__${programme.eventId}`}\n            data-active-programme={isActiveProgramme}\n          >\n            {durationMins < CUTOFF_FOR_INFO_ICON_IN_MINUTES ? <InfoIcon className={classes.info} /> : programme.title}\n          </span>\n        )\n      })}\n    </>\n  )\n}\n\nexport default React.memo(Programmes)\n","import { scheduleTimeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { Channel } from '@data/epg/AllChannels'\nimport streamData from '@data/epg/streams/Streams'\nimport getProgrammeListingForSID, { EPGChannelListing, Programme } from '@data/getEpg'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport dayjs from 'dayjs'\nimport dayJsIsBetween from 'dayjs/plugin/isBetween'\nimport { navigate } from 'gatsby'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport Programmes from './programmes'\n\ndayjs.extend(dayJsIsBetween)\n\ninterface Props {\n  channel: Channel\n}\n\nconst useStyles = makeStyles({\n  item: {\n    padding: '3px 4px',\n  },\n  channelNumber: {\n    width: '3ch',\n    marginRight: 4,\n  },\n  channelName: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: '\"..\"',\n    color: '#fff',\n    background: Colors.main,\n    lineHeight: 1,\n    cursor: 'not-allowed',\n\n    '&[data-has-stream=true]': {\n      cursor: 'pointer',\n    },\n\n    '&:hover, &:focus': {\n      // Highlight channel's active programme\n      '&, & ~ $programme[data-active-programme=true]:not(& ~ $programme[data-active-programme=true] ~ $programme[data-active-programme=true]):not($channelName:hover + span + [data-nolistings=true] ~ $programme[data-active-programme=true])':\n        {\n          background: Colors.yellowMain,\n          color: Colors.main,\n        },\n    },\n  },\n  programme: {\n    '&': {\n      // Fallback value for Chrome\n      textOverflow: 'ellipsis',\n    },\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: '\"..\"',\n    color: '#fff',\n    background: Colors.main,\n    lineHeight: 1,\n  },\n  noListings: {\n    background: Colors.mainFaded,\n    color: Colors.mainFadedText,\n  },\n})\n\nfunction getEventsForNext90Minutes(startTime: dayjs.Dayjs, events: Programme[]): Programme[] {\n  return events.filter(event => {\n    const diff = dayjs(event.startTime).diff(startTime, 'minutes')\n    const diff2 = dayjs(event.startTime + event.duration * 1000).diff(startTime, 'minutes')\n    const ongoing = dayjs(startTime).isBetween(event.startTime, event.startTime + event.duration * 1000, 'minutes', '()')\n\n    return (diff >= 0 && diff < 90) || (diff2 > 0 && diff2 < 90) || ongoing\n  })\n}\n\nconst EpgChannel: React.FC<Props> = ({ channel }) => {\n  const classes = useStyles()\n\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n  const [programmeListings, setProgrammeListings] = useState<EPGChannelListing>(null)\n\n  const eventsWeCareAbout = useMemo(() => {\n    if (!programmeListings) {\n      return null\n    }\n\n    return getEventsForNext90Minutes(scheduleStartTime, programmeListings.schedule)\n  }, [getEventsForNext90Minutes, scheduleStartTime, programmeListings])\n\n  useEffect(() => {\n    if (programmeListings) return\n\n    const abortController = new AbortController()\n\n    getProgrammeListingForSID(String(channel.sid), {\n      abortController,\n    })\n      .then(listings => {\n        setProgrammeListings(listings)\n      })\n      .catch(() => {})\n\n    return () => {\n      abortController.abort()\n    }\n  }, [programmeListings, getProgrammeListingForSID, channel])\n\n  const streamDetails = streamData.find(stream => stream.name === channel.name)\n\n  function browseToStream() {\n    if (!streamDetails) return\n\n    navigate(`/watch-channel/${channel.channelNumber}`)\n  }\n\n  return (\n    <>\n      <span data-has-stream={!!streamDetails} role=\"button\" className={clsx(classes.channelName, classes.item)} onClick={browseToStream}>\n        <span className={classes.channelNumber}>{channel.channelNumber}</span>\n        {channel.name}\n      </span>\n\n      {/* Spacer */}\n      <span />\n\n      {!programmeListings && !eventsWeCareAbout && <span aria-hidden style={{ gridColumnEnd: 'span 90' }} />}\n      {programmeListings && eventsWeCareAbout && <Programmes className={clsx(classes.programme, classes.item)} programmes={eventsWeCareAbout} />}\n      {programmeListings && !eventsWeCareAbout?.length && (\n        <span data-nolistings className={clsx(classes.programme, classes.noListings, classes.item)} style={{ gridColumnEnd: 'span 90' }}>\n          ..no listings available\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default EpgChannel\n","import { scheduleTimeState } from '@atoms'\nimport Colors from '@data/Colors'\nimport { formatTimingHeader } from '@helpers/timeFormatting'\nimport { makeStyles } from '@material-ui/core'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\n\nconst useStyles = makeStyles({\n  timingHeader: {\n    color: Colors.accent,\n    lineHeight: 1.5,\n\n    '&:first-child': { textAlign: 'right' },\n    '&:not(:first-child)': {\n      gridColumnEnd: 'span 30',\n    },\n  },\n})\n\nconst TimingHeaders: React.FC = () => {\n  const { scheduleStartTime } = useRecoilValue(scheduleTimeState)\n  const classes = useStyles()\n\n  return (\n    <>\n      <span className={classes.timingHeader}>Today</span>\n      {/* Spacer */}\n      <span />\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime)}</span>\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime.add(30, 'minutes'))}</span>\n      <span className={classes.timingHeader}>{formatTimingHeader(scheduleStartTime.add(60, 'minutes'))}</span>\n    </>\n  )\n}\n\nexport default TimingHeaders\n","import MenuMoreArrowSvg from '@assets/icons/list-arrow.svg'\nimport ControlText from '@components/ControlVisualisers/ControlText'\nimport ErrorMessage from '@components/ErrorMessage'\nimport RecordButton from '@components/RecordButton'\nimport { Genres } from '@constants/Genres'\nimport Colors from '@data/Colors'\nimport { getChannelAtIndex, getChannelNumberFromNumberPlusN, getFirstChannelNumber, getNChannelsFromNumber } from '@data/epg/AllChannels'\nimport usePrevious from '@hooks/usePrevious'\nimport { makeStyles, NoSsr } from '@material-ui/core'\nimport clsx from 'clsx'\nimport React, { useEffect, useState } from 'react'\nimport ColorButtonsFooter from '../Footer/ColorButtonsFooter'\nimport EpgChannel from './epgChannel'\nimport TimingHeaders from './timingHeaders'\n\ninterface Props {\n  firstChannel: string\n  /**\n   * Optional number to filter by genre.\n   */\n  genreFilter?: Genres\n}\n\nconst CHANNELS_PER_PAGE = 10\nconst HOURS_PER_PAGE = 1.5\nconst MINUTES_PER_PAGE = HOURS_PER_PAGE * 60\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    display: 'grid',\n\n    // Grid column span is used to give programmes the right duration.\n    // A span of `10` would equate to a width equal to 10 minutes.\n    //\n    // This is done by creating 90 columns of width `1fr`, so we have 90\n    // columns of equal width.\n    gridTemplateColumns: `33% 2px repeat(${MINUTES_PER_PAGE}, minmax(0, 1fr))`,\n    gridTemplateRows: `repeat(${CHANNELS_PER_PAGE + 1}, calc(1em + 6px))`,\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    gap: 4,\n    overflow: 'visible',\n    fontFamily: 'Zurich',\n    fontStretch: 'condensed',\n    fontSize: 24,\n    marginTop: -4,\n  },\n  rootWithListArrows: {\n    '&::after, &::before': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      height: 24,\n      width: 32,\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'contain',\n      backgroundImage: `url(${MenuMoreArrowSvg})`,\n      right: 0,\n      transformOrigin: 'center',\n    },\n\n    '&::after': {\n      bottom: 0,\n      transform: 'translateY(100%)',\n    },\n\n    '&::before': {\n      // Row height + row gap\n      top: 30 + 4,\n      transform: 'translateY(-100%) rotate(0.5turn)',\n    },\n  },\n  colorButtons: {\n    position: 'static',\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    marginTop: 16,\n  },\n  controlPrompt: {\n    fontFamily: 'ZurichBT',\n    color: Colors.accent,\n    width: '85%',\n    maxWidth: '85%',\n    margin: 'auto',\n    fontSize: 24,\n    marginTop: 8,\n  },\n  controlText: {\n    fontSize: 20,\n  },\n  noChannelsErrorMsg: {\n    gridColumn: '1 / -1',\n    gridRow: '2 / -1',\n    justifySelf: 'center',\n    alignSelf: 'center',\n    width: '100%',\n  },\n})\n\nfunction updateBrowserUrl(startingChannel: string, genreFilter: number | null) {\n  const newURL = new URL(window.location.href)\n  newURL.search = '?start=' + startingChannel\n\n  if (genreFilter !== null) {\n    newURL.search = newURL.search + '&genre=' + genreFilter\n  }\n\n  window.history.replaceState({ path: newURL.href }, '', newURL.href)\n}\n\nconst Channels: React.FC<Props> = ({ firstChannel, genreFilter }) => {\n  const classes = useStyles()\n  const [startingChannel, setStartingChannel] = useState(firstChannel)\n\n  const prevSettings = usePrevious(`${startingChannel}__${genreFilter}`)\n  const [channelsOnPage, setChannelsOnPage] = useState([])\n\n  useEffect(() => {\n    if (prevSettings !== `${startingChannel}__${genreFilter}`) {\n      const data = getNChannelsFromNumber(startingChannel, CHANNELS_PER_PAGE, genreFilter)\n\n      setChannelsOnPage(data)\n    }\n  })\n\n  function changePage(change: 1 | -1) {\n    setStartingChannel(first => {\n      let newStart = getChannelNumberFromNumberPlusN(first, change * CHANNELS_PER_PAGE, genreFilter)\n\n      // If the start channel matches the current, we're at the end of the list, so\n      // let's wrap to the other side.\n      if (newStart === first) {\n        if (change === 1) {\n          // down a page\n          newStart = getChannelAtIndex(0, genreFilter)?.channelNumber || getFirstChannelNumber(genreFilter) || '101'\n        } else {\n          // up a page\n          newStart = getChannelAtIndex(-1, genreFilter)?.channelNumber || getFirstChannelNumber(genreFilter) || '101'\n        }\n      }\n\n      if (window.history.replaceState) {\n        updateBrowserUrl(newStart, genreFilter)\n      }\n\n      return newStart\n    })\n  }\n\n  const noChannels = !channelsOnPage || channelsOnPage.length === 0\n\n  return (\n    <>\n      <section className={clsx(classes.root, !noChannels && classes.rootWithListArrows)}>\n        <TimingHeaders />\n\n        <NoSsr>\n          {channelsOnPage?.map(channel => (\n            <EpgChannel key={channel.sid} channel={channel} />\n          ))}\n\n          {noChannels && (\n            <ErrorMessage errorCode={null} className={classes.noChannelsErrorMsg} controlPrompt controlPromptAction=\"cancel\">\n              <br />\n              There are no services of this type available.\n            </ErrorMessage>\n          )}\n        </NoSsr>\n      </section>\n\n      <ColorButtonsFooter\n        className={classes.colorButtons}\n        buttonPressHandler={btn => {\n          if (btn === 'red') {\n            changePage(-1)\n          } else if (btn === 'green') {\n            changePage(+1)\n          }\n        }}\n        buttonsText={noChannels ? {} : { red: 'Page Up', green: 'Page Down', yellow: '+24 Hours', blue: '–24 Hours' }}\n      />\n\n      <p className={classes.controlPrompt}>\n        {!noChannels && (\n          <>\n            Press <ControlText className={classes.controlText}>SELECT</ControlText> to view or <RecordButton /> to record\n          </>\n        )}\n      </p>\n    </>\n  )\n}\n\nexport default Channels\n","import { useEffect, useRef } from 'react'\n\nexport default function usePrevious<T>(value: T): T {\n  const ref = useRef<T>()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n","import EpgBackgroundImage from '@assets/images/guide-bg.sized.png'\nimport { GenreName, Genres } from '@constants/Genres'\nimport { makeStyles, NoSsr } from '@material-ui/core'\nimport React from 'react'\nimport { Header, TitleHeader } from '../Header'\nimport Channels from './listings'\n\ninterface Props {\n  startingChannel: string\n  /**\n   * Optional number to filter by genre.\n   */\n  genreFilter?: Genres\n}\n\nconst useStyles = makeStyles({\n  root: {\n    background: `url(${EpgBackgroundImage})`,\n  },\n})\n\nconst ChannelListing: React.FC<Props> = ({ startingChannel, genreFilter }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Header logoText=\"guide\">\n        <NoSsr>\n          <TitleHeader heading={GenreName[genreFilter] || 'All channels'} />\n        </NoSsr>\n      </Header>\n      <NoSsr>\n        <Channels firstChannel={startingChannel} genreFilter={genreFilter} />\n      </NoSsr>\n    </div>\n  )\n}\n\nexport default ChannelListing\n","import { controlsState } from '@atoms'\nimport ChannelListing from '@components/epg/ChannelListing/index'\nimport { Genres } from '@constants/Genres'\nimport controlsShownStateSetter from '@helpers/controlsShownStateSetter'\nimport isSSG from '@helpers/isSSG'\nimport InnerLayout from '@layouts/InnerLayout'\nimport type { WindowLocation } from '@reach/router'\nimport { navigate, PageProps } from 'gatsby'\nimport React, { useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\n\ntype Props = PageProps<object, object, WindowLocation<{ startFromChannelNumber?: string; genre?: Genres }>['state']>\n\nfunction getStartChannelFromWindow(): string | null {\n  if (!isSSG()) {\n    try {\n      return new URL(window.location.href).searchParams.get('start')\n    } catch {\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nfunction getGenreFromWindow(): number | null {\n  if (!isSSG()) {\n    try {\n      return parseInt(new URL(window.location.href).searchParams.get('genre')) || null\n    } catch {\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nconst ChannelListingPage: React.FC<Props> = ({ location }) => {\n  const startFromChannelNumber = location?.state?.startFromChannelNumber || getStartChannelFromWindow() || '101'\n  const genreNumber: number | null = location?.state?.genre || getGenreFromWindow() || null\n\n  const [controlsVisible, setControlsVisible] = useRecoilState(controlsState)\n\n  function goBack(e: SkyControlPressedEvent) {\n    const control = e.detail.control\n\n    if (['backUp'].includes(control)) {\n      navigate('/', { state: { selectedTab: 'GUIDE' } })\n    }\n  }\n\n  setControlsVisible(controlsShownStateSetter('backUp', true))\n\n  useEffect(() => {\n    document.addEventListener('skyControlPressed', goBack)\n\n    return () => {\n      document.removeEventListener('skyControlPressed', goBack)\n      controlsVisible.backUp && setControlsVisible(controlsShownStateSetter(['backUp'], false))\n    }\n  })\n\n  return (\n    <InnerLayout>\n      <ChannelListing startingChannel={startFromChannelNumber} genreFilter={genreNumber} />\n    </InnerLayout>\n  )\n}\n\nexport default ChannelListingPage\n","var React = require('react');\n\nfunction InfoInline (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fill\":\"currentColor\",\"d\":\"M.9 0v1.4h2.87V0zm0 2.12v3.85l-.9.17v.81h4.68v-.81l-.91-.17V2.12z\"}));\n}\n\nInfoInline.defaultProps = {\"viewBox\":\"0 0 4.68 6.95\"};\n\nmodule.exports = InfoInline;\n\nInfoInline.default = InfoInline;\n"],"names":["useEnhancedEffect","window","props","children","_props$defer","defer","_props$fallback","fallback","_React$useState","mountedState","setMountedState","module","exports","e","i","t","prototype","isBetween","s","f","n","o","r","u","this","isAfter","isBefore","useHeaderStyles","makeStyles","root","fontFamily","fontWeight","color","Colors","display","flexDirection","marginTop","date","fontStretch","fontSize","title","letterSpacing","textTransform","heading","timeText","useRecoilValue","timeState","time","format","classes","NoSsr","className","EPG_API_URL","getProgrammeListingForSID","channelSid","abortController","realDate","dayjs","fetch","signal","json","jsonData","events","schedule","response","map","event","startTime","st","duration","d","eventId","eid","channelGenreId","cgid","programmeUuid","programmeuuid","seasonNumber","seasonnumber","episodeNumber","episodenumber","seasonUuid","seasonuuid","seriesUuid","seriesuuid","hasChildren","haschildren","synopsis","sy","eg","esg","tso","rating","audioTechnology","at","hasSubtitles","hasAudioDescription","ad","isHd","hd","isNew","new","canSeriesLink","canl","canBookRecording","canb","hasAlternativeAudio","isRestartable","restartable","slo","w","ippv","oppv","BUTTON_SIZE","useStyles","background","lineHeight","justifyContent","width","height","verticalAlign","transform","border","borderRadius","inner","clsx","info","infoContainer","Programmes","programmes","scheduleStartTime","scheduleTimeState","programmeCount","length","totalTime","programme","durationPassed","diff","durationMins","Math","round","isActiveProgramme","style","gridColumnEnd","key","React","dayJsIsBetween","item","padding","channelNumber","marginRight","channelName","whiteSpace","overflow","textOverflow","cursor","noListings","getEventsForNext90Minutes","filter","diff2","ongoing","channel","useState","programmeListings","setProgrammeListings","eventsWeCareAbout","useMemo","useEffect","AbortController","String","sid","then","listings","catch","abort","streamDetails","streamData","stream","name","role","onClick","navigate","timingHeader","textAlign","formatTimingHeader","add","position","gridTemplateColumns","gridTemplateRows","maxWidth","margin","gap","rootWithListArrows","content","backgroundPosition","backgroundRepeat","backgroundSize","backgroundImage","MenuMoreArrowSvg","right","transformOrigin","bottom","top","colorButtons","controlPrompt","controlText","noChannelsErrorMsg","gridColumn","gridRow","justifySelf","alignSelf","value","ref","firstChannel","genreFilter","startingChannel","setStartingChannel","prevSettings","useRef","current","channelsOnPage","setChannelsOnPage","changePage","change","first","newStart","getChannelNumberFromNumberPlusN","getChannelAtIndex","getFirstChannelNumber","history","replaceState","newURL","URL","location","href","search","path","updateBrowserUrl","data","getNChannelsFromNumber","noChannels","ErrorMessage","errorCode","controlPromptAction","ColorButtonsFooter","buttonPressHandler","btn","buttonsText","red","green","yellow","blue","ControlText","EpgBackgroundImage","Header","logoText","GenreName","startFromChannelNumber","state","isSSG","searchParams","get","getStartChannelFromWindow","genreNumber","genre","parseInt","getGenreFromWindow","useRecoilState","controlsState","controlsVisible","setControlsVisible","goBack","control","detail","includes","selectedTab","controlsShownStateSetter","document","addEventListener","removeEventListener","backUp","InnerLayout","InfoInline","createElement","defaultProps","default"],"sourceRoot":""}