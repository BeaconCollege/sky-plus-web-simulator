{"version":3,"sources":["webpack://sky-plus-epg-simulator/./src/data/ErrorCodes.tsx","webpack://sky-plus-epg-simulator/./src/components/ErrorMessage.tsx","webpack://sky-plus-epg-simulator/./src/components/FullScreenError.tsx","webpack://sky-plus-epg-simulator/./src/helpers/controlsShownStateSetter.ts","webpack://sky-plus-epg-simulator/./src/assets/images/sharing-image.jpg","webpack://sky-plus-epg-simulator/./src/components/SEO.tsx","webpack://sky-plus-epg-simulator/./src/layouts/InnerLayout.tsx","webpack://sky-plus-epg-simulator/./src/pages/interactive/service-unavailable.tsx"],"names":["ErrorCodes","ErrorText","NO_CARD_INSERTED","NO_SATELLITE_SIGNAL","NO_SATELLITE_SIGNAL_2","useStyles","makeStyles","messageBox","width","overflow","maxHeight","messageBoxWider","messageBoxHorizCenter","margin","messageBoxHeader","background","Colors","color","textTransform","lineHeight","fontSize","textAlign","position","fontFamily","fontStretch","fontWeight","letterSpacing","messageBoxErrorCode","right","messageBoxContent","display","flexDirection","justifyContent","padding","paddingBottom","minHeight","messageBoxFooter","title","errorCode","children","customControlData","text","control","controlPrompt","controlPromptAction","onControlPressed","wider","horizontallyCentered","className","classes","setControlsState","useSetRecoilState","controlsState","controlsShownStateSetter","useEffect","backUpEventListener","e","detail","stopImmediatePropagation","document","addEventListener","removeEventListener","role","clsx","String","padStart","ControlText","root","top","bottom","left","alignItems","props","controlName","isShown","Array","isArray","controlsRaw","controls","forEach","Object","keys","includes","description","meta","site","useStaticQuery","metaDescription","siteMetadata","realTitle","Title","Meta","name","content","SharingImageUrl","Link","rel","href","map","m","i","key","location","serviceName","state","navigate","selectedTab"],"mappings":"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","file":"component---src-pages-interactive-service-unavailable-tsx-72f9f202182651453dce.js","sourcesContent":["import React from 'react'\n\n/**\n * List of known Sky error codes.\n *\n * Not complete at all.\n */\nenum ErrorCodes {\n  NO_CARD_INSERTED = 1,\n  CARD_READ_ERROR = 2,\n  CARD_CHECK_FAIL = 3,\n  UNAUTHORISED_CARD = 6,\n  /**\n   * CP01 on Sky+HD R010 and newer\n   */\n  UNPAIRED_CARD = 7,\n  ENCRYPTION_KEY_FAILURE = 8,\n  UNAUTHORISED_CARD_2 = 9,\n  NO_SATELLITE_SIGNAL = 28,\n  NO_SATELLITE_SIGNAL_2 = 29,\n}\n\nexport const ErrorText = {\n  [ErrorCodes.NO_CARD_INSERTED]: <>Insert your Sky viewing card</>,\n  [ErrorCodes.NO_SATELLITE_SIGNAL]: (\n    <>\n      No Satellite Signal is being received.\n      <br />\n      Please unplug your box from the mains, then plug it back in and wait 5 minutes before trying again.\n      <br />\n      If the fault persists, contact customer services.\n    </>\n  ),\n  [ErrorCodes.NO_SATELLITE_SIGNAL_2]: (\n    <>\n      No Satellite Signal is being received.\n      <br />\n      Please unplug your box from the mains, then plug it back in and wait 5 minutes before trying again.\n      <br />\n      If the fault persists, contact customer services.\n    </>\n  ),\n} as const\n\nexport default ErrorCodes\n","import { controlsState } from '@atoms'\nimport Colors from '@data/Colors'\nimport ErrorCodes, { ErrorText } from '@data/ErrorCodes'\nimport controlsShownStateSetter from '@helpers/controlsShownStateSetter'\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport React, { useEffect } from 'react'\nimport { useSetRecoilState } from 'recoil'\nimport ControlText from './ControlVisualisers/ControlText'\n\nconst useStyles = makeStyles({\n  messageBox: {\n    width: '80%',\n    overflow: 'hidden',\n    maxHeight: '80%',\n  },\n  messageBoxWider: {\n    width: '92%',\n  },\n  messageBoxHorizCenter: {\n    margin: 'auto',\n  },\n  messageBoxHeader: {\n    background: Colors.yellowMain,\n    color: Colors.main,\n    textTransform: 'uppercase',\n    lineHeight: '29px',\n    fontSize: 24,\n    textAlign: 'center',\n    position: 'relative',\n\n    fontFamily: 'Zurich',\n    fontStretch: 'expanded',\n    fontWeight: 700,\n    letterSpacing: 0.4,\n  },\n  messageBoxErrorCode: {\n    position: 'absolute',\n    right: 4,\n  },\n  messageBoxContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    padding: 4,\n    paddingBottom: 1,\n    fontFamily: 'ZurichBT',\n    fontWeight: 400,\n    background: Colors.mainLight,\n    color: Colors.mainText,\n    fontSize: 25,\n    textAlign: 'center',\n    letterSpacing: 0.5,\n    lineHeight: '32px',\n    minHeight: 32 * 4 + 4 + 4,\n  },\n  messageBoxFooter: {\n    color: Colors.yellowText,\n    paddingBottom: 1,\n  },\n})\n\nexport interface ErrorMessageProps {\n  /**\n   * Error message title\n   *\n   * @default \"For your information\"\n   */\n  title?: string\n  /**\n   * Error message number\n   *\n   * @default 28\n   */\n  errorCode?: number | null\n  /**\n   * Error message content\n   *\n   * @default \"No Satellite Signal is being received. [...]\"\n   */\n  children?: React.ReactNode\n  /**\n   * Whether to show the Back Up prompt or not\n   *\n   * @default false\n   */\n  controlPrompt?: boolean\n  /**\n   * Custom Back Up prompt action text.\n   *\n   * Results in: `Press BACK UP to <text here>`\n   */\n  controlPromptAction?: string\n  onControlPressed?: () => void\n  /**\n   * Info to be used to choose a custom control to watch for.\n   *\n   * `text` is shown as part of the `controlPrompt`, and `control` is used for the event listener.\n   */\n  customControlData?: {\n    text: string\n    control: SkyControl\n  }\n  /**\n   * Use the wider variant of error message. This is used when the error message is shown within the EPG itself.\n   */\n  wider?: boolean\n  /**\n   * Horizontally center the message box within the parent container.\n   *\n   * (Applies `margin: auto`.)\n   */\n  horizontallyCentered?: boolean\n  /**\n   * Classes to apply to the message box's root node.\n   */\n  className?: string\n}\n\n/**\n * Displays a Sky-themed error message.\n *\n * Defaults to a No Satellite error.\n *\n * Title is almost always \"FOR YOUR INFORMATION\" on a real box.\n */\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({\n  title = 'For your information',\n  errorCode = ErrorCodes.NO_SATELLITE_SIGNAL,\n  children = ErrorText[ErrorCodes.NO_SATELLITE_SIGNAL],\n  customControlData = { text: 'BACK UP', control: 'backUp' },\n  controlPrompt = false,\n  controlPromptAction = 'return',\n  onControlPressed = () => {},\n  wider = false,\n  horizontallyCentered = false,\n  className,\n}) => {\n  const classes = useStyles()\n  const setControlsState = useSetRecoilState(controlsState)\n\n  if (controlPrompt) {\n    setControlsState(controlsShownStateSetter('backUp', true))\n  }\n\n  useEffect(() => {\n    if (controlPrompt) {\n      function backUpEventListener(e: SkyControlPressedEvent) {\n        if (e.detail.control === customControlData.control) {\n          e.stopImmediatePropagation()\n          onControlPressed()\n        }\n      }\n\n      document.addEventListener('skyControlPressed', backUpEventListener)\n\n      return () => {\n        document.removeEventListener('skyControlPressed', backUpEventListener)\n        setControlsState(controlsShownStateSetter('backUp', false))\n      }\n    }\n  })\n\n  return (\n    <section\n      role=\"alert\"\n      className={clsx(classes.messageBox, wider && classes.messageBoxWider, horizontallyCentered && classes.messageBoxHorizCenter, className)}\n    >\n      <header className={classes.messageBoxHeader}>\n        {title}\n        <span className={classes.messageBoxErrorCode}>\n          {errorCode !== null && typeof errorCode !== 'undefined' && String(errorCode).padStart(2, '0')}\n        </span>\n      </header>\n      <article className={classes.messageBoxContent}>\n        {children}\n        {controlPrompt && (\n          <footer className={classes.messageBoxFooter}>\n            Press <ControlText>{customControlData.text}</ControlText> to {controlPromptAction}\n          </footer>\n        )}\n      </article>\n    </section>\n  )\n}\n\nexport default ErrorMessage\n","import Colors from '@data/Colors'\nimport { makeStyles } from '@material-ui/core'\nimport React from 'react'\nimport ErrorMessage, { ErrorMessageProps } from './ErrorMessage'\n\nconst useStyles = makeStyles({\n  root: {\n    background: Colors.accent,\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  messageBox: {\n    width: '80%',\n    overflow: 'hidden',\n    maxHeight: '80%',\n  },\n  messageBoxHeader: {\n    background: Colors.yellowMain,\n    color: Colors.main,\n    textTransform: 'uppercase',\n    lineHeight: '29px',\n    fontSize: 24,\n    textAlign: 'center',\n    position: 'relative',\n  },\n  messageBoxErrorCode: {\n    position: 'absolute',\n    right: 4,\n  },\n  messageBoxContent: {\n    padding: 4,\n    paddingBottom: 0,\n    fontFamily: 'ZurichBT',\n    background: Colors.mainLight,\n    color: Colors.mainText,\n    fontSize: 25,\n    textAlign: 'center',\n    letterSpacing: 0.5,\n    lineHeight: '32px',\n  },\n})\n\n/**\n * Displays a full-screen Sky error message using the props provided.\n */\nconst FullScreenError: React.FC<ErrorMessageProps> = ({ ...props }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <ErrorMessage {...props} />\n    </div>\n  )\n}\n\nexport default FullScreenError\n","/**\n * Returns a set state function to be passed into `useSetRecoilState`.\n *\n * If `isShown` is not provided, the control will be toggled.\n *\n * @example <caption>Shows the back up button</caption>\n * useSetRecoilState(controlsState)(controlsShownStateSetter('backUp', true))\n *\n * @param controlName Name of array of names for the control(s) to show/hide/toggle\n * @param isShown (optional) Whether it/they should be shown or not\n * @returns Recoil setState handler function to set the visibility of this control\n */\nexport default function controlsShownStateSetter(controlName: SkyControl | SkyControl[], isShown?: boolean) {\n  if (Array.isArray(controlName)) {\n    return controlsRaw => {\n      let controls = { ...controlsRaw }\n\n      controlName.forEach(control => {\n        if (Object.keys(controls).includes(control)) {\n          controls[control] = typeof isShown !== 'boolean' ? !controls[control] : isShown\n        } else {\n          throw `Invalid control provided to \\`controlsShownStateSetter\\`: \"${control}\".`\n        }\n      })\n\n      return controls\n    }\n  }\n\n  return controlsRaw => {\n    let controls = { ...controlsRaw }\n\n    if (Object.keys(controls).includes(controlName)) {\n      controls[controlName] = typeof isShown !== 'boolean' ? !controls[controlName] : isShown\n    } else {\n      throw `Invalid control provided to \\`controlsShownStateSetter\\`: \"${controlName}\".`\n    }\n\n    return controls\n  }\n}\n","export default __webpack_public_path__ + \"static/sharing-image-db5dc5b9424e9194bebb470cf9c6e978.jpg\";","import SharingImageUrl from '@assets/images/sharing-image.jpg'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Link, Meta, Title } from 'react-head'\n\ntype MetaEntry = {\n  name: string\n  content: string\n}\n\ninterface Props {\n  description?: string\n  meta?: MetaEntry[]\n  title: string\n}\n\nconst SEO: React.FC<Props> = ({ description, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const realTitle = title ? `${title} | ${site.siteMetadata.title}` : site.siteMetadata.title\n\n  return (\n    <>\n      <Title>{realTitle}</Title>\n      <Meta name=\"description\" content={metaDescription} />\n\n      <Meta name=\"og:locale\" content=\"en_GB\" />\n      <Meta name=\"og:title\" content={realTitle} />\n      <Meta name=\"og:description\" content={metaDescription} />\n      <Meta name=\"og:type\" content=\"website\" />\n      <Meta name=\"og:image\" content={SharingImageUrl} />\n\n      <Meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <Meta name=\"twitter:title\" content={realTitle} />\n      <Meta name=\"twitter:description\" content={metaDescription} />\n      <Meta name=\"twitter:creator\" content=\"@davwheat\" />\n      <Meta name=\"twitter:site\" content=\"@davwheat\" />\n      <Meta name=\"twitter:image\" content={SharingImageUrl} />\n      <Meta name=\"twitter:image:alt\" content=\"Screenshot of the Sky+ Web EPG.\" />\n\n      {/* Establish connection to Sky's EPG API */}\n      <Link rel=\"preconnect\" href=\"https://awk.epgsky.com/\" />\n\n      {meta && meta.map((m, i) => <Meta key={`${m.name}--${i}`} name={m.name} content={m.content} />)}\n    </>\n  )\n}\n\nexport default SEO\n","import SEO from '@components/SEO'\nimport React from 'react'\n\ninterface Props {\n  title?: string\n  description?: string\n  children: React.ReactNode\n}\n\nconst InnerLayout: React.FC<Props> = ({ title, description, children }) => {\n  return (\n    <>\n      <SEO title={title} description={description} />\n      {children}\n    </>\n  )\n}\n\nexport default InnerLayout\n","import FullScreenError from '@components/FullScreenError'\nimport InnerLayout from '@layouts/InnerLayout'\nimport type { WindowLocation } from '@reach/router'\nimport { navigate, PageProps } from 'gatsby'\nimport React from 'react'\n\ntype Props = PageProps<object, object, WindowLocation<{ serviceName?: string }>['state']>\n\nconst ServiceUnavailablePage: React.FC<Props> = ({ location }) => {\n  const serviceName = location?.state?.serviceName || 'This interactive service'\n\n  return (\n    <InnerLayout>\n      <FullScreenError\n        errorCode={null}\n        controlPrompt\n        controlPromptAction=\"cancel\"\n        onControlPressed={() => navigate('/', { state: { selectedTab: 'INTERACTIVE' } })}\n      >\n        <br />\n        {serviceName} is not available.\n      </FullScreenError>\n    </InnerLayout>\n  )\n}\n\nexport default ServiceUnavailablePage\n"],"sourceRoot":""}